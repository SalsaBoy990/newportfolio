{
  "version": 3,
  "sources": ["../../_javascript/basestats/modules/base.js", "../../_javascript/basestats/utils/utils.js", "../../_javascript/basestats/modules/percentile.js", "../../_javascript/basestats/modules/props.js", "../../_javascript/basestats/main.js"],
  "sourcesContent": ["// BASIC STATISTICAL FUNCTIONS\nconst base = {\n    sum: sum,\n    square: square,\n    min: min,\n    max: max,\n    amean: amean,\n    variance: variance,\n    stdev: stdev\n};\n\n// Returns the sum of the two params.\nfunction sum(x, y) {\n    return x + y\n}\n\n// Returns the square of the argument.\nfunction square(x) {\n    return x * x\n}\n\n// Returns the smaller number from two params.\nfunction min(x, y) {\n    return (x < y) ? x : y\n}\n\n// Returns the larger number from two params.\nfunction max(x, y) {\n    return (x > y) ? x : y\n}\n\n// Calculates arithmetic mean from array data.\nfunction amean(data) {\n    return data.reduce(sum, 0) / data.length\n}\n\n// Calculates variance from array data.\nfunction variance(data) {\n    let mean = amean(data)\n    let deviations = data.map(function (x) {\n        return x - mean\n    })\n    return deviations.map(square).reduce(sum, 0) / (data.length - 1)\n}\n\n// Calculates standard deviation from array data.\nfunction stdev(data) {\n    return Math.sqrt(variance(data))\n}\n\nexport default base;\n", "// general and percentile utils\nconst utils = {\n\n    // Determines if x is an integer.\n    isInteger: function (x) {\n        return Math.round(x) === x\n    },\n\n    // Is object type an \"Array\"?\n    isArray: function (o) {\n        return classOf(o) === 'Array'\n    },\n\n\n    // Orders array elements in ascending order.\n    ascendingOrder: function (arr) {\n        return arr.sort(function (a, b) {\n            return a - b\n        })\n    },\n\n    // Creates rank array for the sorted array.\n    createRankArray: function (length) {\n        let arr = []\n        for (let i = 1; i <= length; i++) {\n            arr.push(i)\n        }\n        return arr\n    },\n\n    // Calculates the rank of the percentile.\n    getPercentileRank: function (p, n) {\n        return (p / 100) * (n + 1)\n    },\n\n    // Calculates the value of the percentile.\n    getPercentileValue: function (decimalPart, smallerValue, biggerValue) {\n        return decimalPart * (biggerValue - smallerValue) + smallerValue\n    }\n}\n\n// classOf function to determine the object type (Object, Array, Function)\nfunction classOf(o) {\n    if (o === null) {\n        return 'Null'\n    }\n    if (o === undefined) {\n        return 'Undefined'\n    }\n    return Object.prototype.toString.call(o).slice(8, -1)\n}\n\nexport default utils;\n", "import utils from '../utils/utils';\n\n// These statistics are needed to create a boxplot\nconst percentile = {\n    getOutliers: getOutliers,\n    percentile: getPercentile,\n    firstQuartile: firstQuartile,\n    median: median,\n    thirdQuartile: thirdQuartile\n}\n\n\n// Calculate the p-th percentile. http://onlinestatbook.com/2/introduction/percentiles.html\n// Args:\n// arr: contains the values\n// p: the p-th percentile\nfunction getPercentile(arr, p) {\n    let n = arr.length\n    // sort array values in ascending order\n    let values = utils.ascendingOrder(arr)\n    // create rank array incrementing numbers from 1 to n\n    let ranks = utils.createRankArray(n)\n\n    // get the p-th percentile's rank\n    let percentileRank = utils.getPercentileRank(p, n)\n\n    // if the p-th percentile's rank is an integer return the value unchanged\n    if (utils.isInteger(percentileRank)) {\n        for (let i = 0; i < n; i++) {\n            if (ranks[i] === percentileRank) {\n                return values[i]\n            }\n        }\n    } else { // if the rank is a decimal number\n        let integerPart = Math.trunc(percentileRank)\n        let decimalPart = percentileRank - integerPart\n\n        let smallerValue\n        let biggerValue\n\n        for (let i = 0; i < n; i++) {\n            // match the integer part\n            if (ranks[i] === integerPart) {\n                smallerValue = values[i]\n                biggerValue = values[i + 1]\n                break\n            }\n        }\n        // get the p-th percentile's value\n        return utils.getPercentileValue(decimalPart, smallerValue, biggerValue)\n    }\n}\n\n\n// Calculates the 25th percentile (Q1)\n// Arg:\n// arr: array containing our data\nfunction firstQuartile(arr) {\n    return getPercentile(arr, 25)\n}\n\n\n// Calculates the 50th percentile (median, Q2)\n// Arg:\n// arr: array containing our data\nfunction median(arr) {\n    return getPercentile(arr, 50)\n}\n\n// Calculates the 75th percentile (Q3)\n// Arg:\n// arr: array containing our data\nfunction thirdQuartile(arr) {\n    return getPercentile(arr, 75)\n}\n\n\n// Gets outliers that are outside the range of Q3 + 1.5*IQR, and Q1 - 1.5*IQR. IQR = inter-quartile range.\n// Arg:\n// arr: array containing our data\nfunction getOutliers(arr) {\n    let n = arr.length\n\n    // limits object containing the lower and upper limits\n    let limits = lowerAndUpperLimits(arr)\n\n    // array to push outlier values\n    let outliers = []\n    for (let i = 0; i < n; i++) {\n        // over the upper limit\n        if (arr[i] > limits.upperLimit) {\n            outliers.push(arr[i])\n        } else if (arr[i] < limits.lowerLimit) { // over the lower limit\n            outliers.push(arr[i])\n        }\n    }\n    // return outliers in ascending order\n    return utils.ascendingOrder(outliers)\n}\n\n\n// Calculate the lower and upper limits of the whiskers\n// Arg:\n// arr: array containing our data\nfunction lowerAndUpperLimits(arr) {\n    let Q3 = thirdQuartile(arr)\n    let Q1 = firstQuartile(arr)\n    // Calculate IQR or inter-quartile range\n    let IQR = Q3 - Q1\n\n    // calculate upper and lower limit with these expressions\n    let upperLimit = Q3 + 1.5 * IQR\n    let lowerLimit = Q1 - 1.5 * IQR\n\n    // limits object\n    return {\n        lowerLimit: lowerLimit,\n        upperLimit: upperLimit\n    }\n}\n\nexport default percentile;\n", "// List of statistical properties that are currently supported by basestats\nexport const statistics = [\n    'min',\n    'max',\n    'sum',\n    'amean', // arithmetic mean\n    'Q1',\n    'median',\n    'Q3',\n    'outliers',\n    'variance',\n    'stdev'\n]\n\n// List of statistical properties that are currently supported by basestats\nexport const statisticsNames = [\n    'Minimum',\n    'Maximum',\n    '\u00D6sszeg',\n    'Sz\u00E1mtani \u00E1tlag',\n    '1. kvartilis (25%)',\n    'Medi\u00E1n',\n    '3. kvartilis (75%)',\n    'Kiugr\u00F3 \u00E9rt\u00E9kek',\n    'Variancia',\n    'Sz\u00F3r\u00E1s'\n]\n", "import base from \"./modules/base\";\nimport pc from \"./modules/percentile\";\nimport {statistics, statisticsNames} from \"./modules/props\";\nimport utils from \"./utils/utils\";\n\n\nconst main = {\n    // Array of statistical properties that you can currently calculate\n    statistics: statistics,\n\n    statisticsNames: statisticsNames,\n\n\n    // Calculate basic statistical properties\n    // Args:\n    // stats: array containing the stats to calculate see the 'vars' property above\n    // data: array containing the data to calculate stats from\n    // error handling needs enhancements...\n    getStats: function (data) {\n\n        if (arguments.length < 1) {\n            throw new Error('You did not supply all the arguments.')\n        }\n        if (!utils.isArray(this.statistics) || !utils.isArray(data)) {\n            throw new Error('Arguments of array type needed.')\n        }\n\n        // To store the result object.\n        let result = {}\n        let str\n        for (let i = 0; i < this.statistics.length; i++) {\n            switch (str = this.statistics[i]) {\n                case 'sum':\n                    result[str] = {name: this.statisticsNames[i], value: data.reduce(base.sum, 0)}\n                    break\n\n                case 'min':\n                    result[str] = {name: this.statisticsNames[i], value: data.reduce(base.min)}\n                    break\n\n                case 'max':\n                    result[str] = {name: this.statisticsNames[i], value: data.reduce(base.max)}\n                    break\n\n                case 'amean':\n                    result[str] = {name: this.statisticsNames[i], value: base.amean(data)}\n                    break\n\n                case 'variance':\n                    result[str] = {name: this.statisticsNames[i], value: base.variance(data)}\n                    break\n\n                case 'stdev':\n                    result[str] = {name: this.statisticsNames[i], value: base.stdev(data)}\n                    break\n\n                case 'median':\n                    result[str] = {name: this.statisticsNames[i], value: pc.median(data)}\n                    break\n\n                case 'Q1':\n                    result[str] = {name: this.statisticsNames[i], value: pc.firstQuartile(data)}\n                    break\n\n                case 'Q3':\n                    result[str] = {name: this.statisticsNames[i], value: pc.thirdQuartile(data)}\n                    break\n\n                case 'outliers':\n                    result[str] = {name: this.statisticsNames[i], value: pc.getOutliers(data)}\n                    break\n\n                default:\n                    console.error(`Cannot calculate the statistical property called: ${str}`)\n                    break\n            }\n        }\n        return result\n    },\n\n    // Get the percentiles from 0 to 100\n    // Arg:\n    // data: array containing the data to calculate stats from\n    getAllPercentiles: function (data) {\n        let result = {}\n        for (let i = 5; i <= 95; i += 5) {\n            result[i] = pc.percentile(data, i)\n        }\n        return result\n    }\n}\n\nwindow.basestats = main;\n"],
  "mappings": "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",
  "names": []
}
